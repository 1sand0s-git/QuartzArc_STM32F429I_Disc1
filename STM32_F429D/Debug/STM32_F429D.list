
STM32_F429D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e00  08003e00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000b0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001348a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002590c  00000000  00000000  0003352e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d57  00000000  00000000  00058e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c78  00000000  00000000  0005db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00107c85  00000000  00000000  0005e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  00166498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e599  00000000  00000000  00167018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001955b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000374c  00000000  00000000  00195604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d60 	.word	0x08003d60

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08003d60 	.word	0x08003d60

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80004f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800052c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004fa:	490e      	ldr	r1, [pc, #56]	; (8000534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000510:	4c0b      	ldr	r4, [pc, #44]	; (8000540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800051e:	f000 fde9 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f003 fb1f 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000526:	f000 fa8d 	bl	8000a44 <main>
  bx  lr    
 800052a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800052c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000538:	08003e08 	.word	0x08003e08
  ldr r2, =_sbss
 800053c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000540:	20000124 	.word	0x20000124

08000544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_IRQHandler>
	...

08000548 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b0aa      	sub	sp, #168	; 0xa8
 800054c:	af00      	add	r7, sp, #0
	//-----------------------
  //Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054e:	4ba4      	ldr	r3, [pc, #656]	; (80007e0 <_Z16SystemInitializev+0x298>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4aa3      	ldr	r2, [pc, #652]	; (80007e0 <_Z16SystemInitializev+0x298>)
 8000554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000558:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 800055a:	4ba1      	ldr	r3, [pc, #644]	; (80007e0 <_Z16SystemInitializev+0x298>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4aa0      	ldr	r2, [pc, #640]	; (80007e0 <_Z16SystemInitializev+0x298>)
 8000560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000564:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000566:	4b9e      	ldr	r3, [pc, #632]	; (80007e0 <_Z16SystemInitializev+0x298>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a9d      	ldr	r2, [pc, #628]	; (80007e0 <_Z16SystemInitializev+0x298>)
 800056c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000570:	6013      	str	r3, [r2, #0]


	//--------------------------
	//Set NVIC Priority Grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000572:	2003      	movs	r0, #3
 8000574:	f000 ff14 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>


	//------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fdcd 	bl	8001118 <HAL_InitTick>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800058e:	2301      	movs	r3, #1
 8000590:	e121      	b.n	80007d6 <_Z16SystemInitializev+0x28e>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000596:	4b93      	ldr	r3, [pc, #588]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	4a92      	ldr	r2, [pc, #584]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	6413      	str	r3, [r2, #64]	; 0x40
 80005a2:	4b90      	ldr	r3, [pc, #576]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80005a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ae:	2300      	movs	r3, #0
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b2:	4b8d      	ldr	r3, [pc, #564]	; (80007e8 <_Z16SystemInitializev+0x2a0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ba:	4a8b      	ldr	r2, [pc, #556]	; (80007e8 <_Z16SystemInitializev+0x2a0>)
 80005bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	4b89      	ldr	r3, [pc, #548]	; (80007e8 <_Z16SystemInitializev+0x2a0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80005cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

	//Configure Oscillators
	//
	//Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide 168MHz clock
	//NOTE: HSE Oscillator provided on STM32F429I-DISC1 board is provided by a 8MHz oscillator (labeled X3 on the PCB)
	RCC_OscInitTypeDef RCC_OscInit = {0};
 80005ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fafe 	bl	8003bd8 <memset>
	RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005dc:	2301      	movs	r3, #1
 80005de:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInit.HSEState       = RCC_HSE_ON;             //Set High Speed Extenral oscillator as system clock
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input c;pcl
 80005ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	  //Set PLL Values required for 168MHz system clock
	  //NOTE: Maximum system clock speed for this device is 180MHz, but clock is having to be limited to 168MHz
	  //due to primary PLL also needing to generate 48MHz clock for USB internal PHY
	RCC_OscInit.PLL.PLLM       = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInit.PLL.PLLN       = 144;
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;          //Divider for system clock
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInit.PLL.PLLQ       = 3;                      //Divider for 48MHz USB PHY clock
 8000606:	2303      	movs	r3, #3
 8000608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	HAL_StatusTypeDef eRet = HAL_RCC_OscConfig(&RCC_OscInit);
 800060c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f9e7 	bl	80019e4 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (eRet != HAL_OK) {     //Initialize oscillators using values in init structure
 800061c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z16SystemInitializev+0xe0>
		return QA_Fail;
 8000624:	2301      	movs	r3, #1
 8000626:	e0d6      	b.n	80007d6 <_Z16SystemInitializev+0x28e>
	}


	//-------------------
	//Enable SysCfg Clock
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
 800062c:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800062e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000630:	4a6c      	ldr	r2, [pc, #432]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6453      	str	r3, [r2, #68]	; 0x44
 8000638:	4b6a      	ldr	r3, [pc, #424]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800063a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24


	//----------------------------
	//Configure CPU and Bus Clocks
	RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000644:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
	RCC_ClkInit.ClockType       = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000654:	230f      	movs	r3, #15
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
			                          RCC_CLOCKTYPE_SYSCLK |
																RCC_CLOCKTYPE_PCLK1 |
																RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInit.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;  //Set primary PLL as system clock source
 8000658:	2302      	movs	r3, #2
 800065a:	667b      	str	r3, [r7, #100]	; 0x64

	RCC_ClkInit.AHBCLKDivider   = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 168MHz
 800065c:	2300      	movs	r3, #0
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68

	RCC_ClkInit.APB1CLKDivider  = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 42MHz
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	66fb      	str	r3, [r7, #108]	; 0x6c
	                                                        //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 84MHz clocks

	RCC_ClkInit.APB2CLKDivider  = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 84MHz
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	673b      	str	r3, [r7, #112]	; 0x70
	                                                        //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 168MHz clocks

	if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_5) != HAL_OK) {  //Initialize system clocks using required values,
 800066c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc2e 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_Z16SystemInitializev+0x144>
		                                                                   //and setting Flash Latency to 5 cycles
		return QA_Fail;
 8000688:	2301      	movs	r3, #1
 800068a:	e0a4      	b.n	80007d6 <_Z16SystemInitializev+0x28e>
	}


  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 800068c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000690:	2230      	movs	r2, #48	; 0x30
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fa9f 	bl	8003bd8 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 800069a:	2328      	movs	r3, #40	; 0x28
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 192;
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_8;
 80006ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b2:	657b      	str	r3, [r7, #84]	; 0x54

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSI; //Set the LSI oscillator as the clock source for the Real Time Clock
 80006b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80006ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fe04 	bl	80022cc <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_Z16SystemInitializev+0x190>
  	return QA_Fail;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e07e      	b.n	80007d6 <_Z16SystemInitializev+0x28e>
  }


	//---------------------------
	//Enable all GPIO Port clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
 80006dc:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a40      	ldr	r2, [pc, #256]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
 80006f8:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
 8000704:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6313      	str	r3, [r2, #48]	; 0x30
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 800078a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]


  //---------------------
  //Enable all DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <_Z16SystemInitializev+0x29c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]


	//Return
	return QA_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	37a8      	adds	r7, #168	; 0xa8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void NMI_Handler(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void HardFault_Handler(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HardFault_Handler+0x1c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f002 f998 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <HardFault_Handler+0x20>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f993 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000814:	e7fe      	b.n	8000814 <HardFault_Handler+0x18>
 8000816:	bf00      	nop
 8000818:	20000094 	.word	0x20000094
 800081c:	20000090 	.word	0x20000090

08000820 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void MemManage_Handler(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MemManage_Handler+0x1c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f002 f986 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MemManage_Handler+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f981 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x18>
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	20000090 	.word	0x20000090

08000844 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void BusFault_Handler(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <BusFault_Handler+0x1c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f974 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <BusFault_Handler+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f96f 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 800085c:	e7fe      	b.n	800085c <BusFault_Handler+0x18>
 800085e:	bf00      	nop
 8000860:	20000094 	.word	0x20000094
 8000864:	20000090 	.word	0x20000090

08000868 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void UsageFault_Handler(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <UsageFault_Handler+0x1c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f002 f962 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <UsageFault_Handler+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f95d 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x18>
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094
 8000888:	20000090 	.word	0x20000090

0800088c <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void SVC_Handler(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void DebugMon_Handler(void) {
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void PendSV_Handler(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void SysTick_Handler(void) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80008ba:	f000 fc5d 	bl	8001178 <HAL_IncTick>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_Handler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  UART_STLink->handler(NULL);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <USART1_IRQHandler+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fe3e 	bl	8003550 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000098 	.word	0x20000098

080008dc <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 80008e8:	887a      	ldrh	r2, [r7, #2]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f958 	bl	8000ba4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	887a      	ldrh	r2, [r7, #2]
 80008f8:	809a      	strh	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	80da      	strh	r2, [r3, #6]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	811a      	strh	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	4608      	mov	r0, r1
 800091a:	4611      	mov	r1, r2
 800091c:	461a      	mov	r2, r3
 800091e:	4603      	mov	r3, r0
 8000920:	817b      	strh	r3, [r7, #10]
 8000922:	460b      	mov	r3, r1
 8000924:	813b      	strh	r3, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3304      	adds	r3, #4
 8000934:	f107 020a 	add.w	r2, r7, #10
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f94e 	bl	8000bdc <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f946 	bl	8000bdc <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2200      	movs	r2, #0
 8000954:	731a      	strb	r2, [r3, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	735a      	strb	r2, [r3, #13]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	739a      	strb	r2, [r3, #14]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	73da      	strb	r2, [r3, #15]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	08003da0 	.word	0x08003da0

08000978 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	769a      	strb	r2, [r3, #26]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2225      	movs	r2, #37	; 0x25
 80009d4:	76da      	strb	r2, [r3, #27]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	331c      	adds	r3, #28
 80009da:	2244      	movs	r2, #68	; 0x44
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 f8fa 	bl	8003bd8 <memset>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	8b99      	ldrh	r1, [r3, #28]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	8bda      	ldrh	r2, [r3, #30]
 8000a14:	2300      	movs	r3, #0
 8000a16:	f7ff ff7b 	bl	8000910 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	741a      	strb	r2, [r3, #16]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3314      	adds	r3, #20
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f8ee 	bl	8000c12 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08003ddc 	.word	0x08003ddc

08000a44 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f407vgtx.s
int main(void) {
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08f      	sub	sp, #60	; 0x3c
 8000a48:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIO Port and DMA clocks are also enabled by this method.
  if (SystemInitialize()) {
 8000a4a:	f7ff fd7d 	bl	8000548 <_Z16SystemInitializev>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d000      	beq.n	8000a60 <main+0x1c>
  	while (1) {}
 8000a5e:	e7fe      	b.n	8000a5e <main+0x1a>

	//----------------------------------
	//----------------------------------
  //Initialize the User LEDs using the QAD_GPIO_Output driver class
  //QAD_USERLED_**** definitions are defined in setup.hpp
  GPIO_UserLED_Green  = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8000a60:	2014      	movs	r0, #20
 8000a62:	f003 f840 	bl	8003ae6 <_Znwj>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461c      	mov	r4, r3
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	4947      	ldr	r1, [pc, #284]	; (8000b8c <main+0x148>)
 8000a70:	4620      	mov	r0, r4
 8000a72:	f002 f841 	bl	8002af8 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000a76:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <main+0x14c>)
 8000a78:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Red    = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8000a7a:	2014      	movs	r0, #20
 8000a7c:	f003 f833 	bl	8003ae6 <_Znwj>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461c      	mov	r4, r3
 8000a84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a88:	4940      	ldr	r1, [pc, #256]	; (8000b8c <main+0x148>)
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f002 f834 	bl	8002af8 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <main+0x150>)
 8000a92:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	713b      	strb	r3, [r7, #4]
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 8000a98:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a9c:	60bb      	str	r3, [r7, #8]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	733b      	strb	r3, [r7, #12]
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <main+0x154>)
 8000aa4:	613b      	str	r3, [r7, #16]
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 8000aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aaa:	82bb      	strh	r3, [r7, #20]
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 8000aac:	2307      	movs	r3, #7
 8000aae:	75bb      	strb	r3, [r7, #22]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 8000ab0:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <main+0x154>)
 8000ab2:	61bb      	str	r3, [r7, #24]
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	83bb      	strh	r3, [r7, #28]
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 8000aba:	2307      	movs	r3, #7
 8000abc:	77bb      	strb	r3, [r7, #30]
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	843b      	strh	r3, [r7, #32]
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	847b      	strh	r3, [r7, #34]	; 0x22

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000aca:	2018      	movs	r0, #24
 8000acc:	f003 f80b 	bl	8003ae6 <_Znwj>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461c      	mov	r4, r3
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff ff91 	bl	8000a00 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000ade:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <main+0x158>)
 8000ae0:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <main+0x158>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fd11 	bl	8003510 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	bf0c      	ite	eq
 8000af4:	2301      	moveq	r3, #1
 8000af6:	2300      	movne	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <main+0xc6>
  	GPIO_UserLED_Red->on();
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <main+0x150>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 f819 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000b08:	e7fe      	b.n	8000b08 <main+0xc4>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <main+0x158>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fd62 	bl	80035d8 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F429 Discovery Booting...");
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <main+0x158>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4921      	ldr	r1, [pc, #132]	; (8000ba0 <main+0x15c>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fd28 	bl	8003570 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  //Processing Loop

	//Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000b20:	f000 fb3e 	bl	80011a0 <HAL_GetTick>
 8000b24:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t uOldTick = uNewTick;
 8000b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28

	//Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000b2e:	f000 fb37 	bl	80011a0 <HAL_GetTick>
 8000b32:	6278      	str	r0, [r7, #36]	; 0x24
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d012      	beq.n	8000b62 <main+0x11e>
    	uOldTick = uNewTick;
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    	uNewTick = uCurTick;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d205      	bcs.n	8000b58 <main+0x114>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
 8000b56:	e006      	b.n	8000b66 <main+0x122>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b60:	e001      	b.n	8000b66 <main+0x122>
    	}

    } else {
    	uTicks = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6a:	4413      	add	r3, r2
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b74:	d3db      	bcc.n	8000b2e <main+0xea>
    	GPIO_UserLED_Green->toggle();
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <main+0x14c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f803 	bl	8002b86 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset hearbeat ticks
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    uCurTick = HAL_GetTick();
 8000b88:	e7d1      	b.n	8000b2e <main+0xea>
 8000b8a:	bf00      	nop
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	20000090 	.word	0x20000090
 8000b94:	20000094 	.word	0x20000094
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	08003d78 	.word	0x08003d78

08000ba4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000bae:	683c      	ldr	r4, [r7, #0]
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f002 ffa9 	bl	8003b08 <_Znaj>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	4602      	mov	r2, r0
 8000bbc:	1e63      	subs	r3, r4, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db04      	blt.n	8000bcc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	7011      	strb	r1, [r2, #0]
 8000bc6:	3201      	adds	r2, #1
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	e7f8      	b.n	8000bbe <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000bcc:	4601      	mov	r1, r0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f839 	bl	8000c46 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd90      	pop	{r4, r7, pc}

08000bdc <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000be6:	6838      	ldr	r0, [r7, #0]
 8000be8:	f000 f849 	bl	8000c7e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000bec:	4603      	mov	r3, r0
 8000bee:	881c      	ldrh	r4, [r3, #0]
 8000bf0:	200c      	movs	r0, #12
 8000bf2:	f002 ff78 	bl	8003ae6 <_Znwj>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f7ff fe6d 	bl	80008dc <_ZN14QAT_FIFOBufferC1Et>
 8000c02:	4629      	mov	r1, r5
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f845 	bl	8000c94 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}

08000c12 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000c12:	b5b0      	push	{r4, r5, r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f000 f855 	bl	8000ccc <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c22:	4605      	mov	r5, r0
 8000c24:	2064      	movs	r0, #100	; 0x64
 8000c26:	f002 ff5e 	bl	8003ae6 <_Znwj>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461c      	mov	r4, r3
 8000c2e:	4629      	mov	r1, r5
 8000c30:	4620      	mov	r0, r4
 8000c32:	f7ff fea1 	bl	8000978 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000c36:	4621      	mov	r1, r4
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f852 	bl	8000ce2 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bdb0      	pop	{r4, r5, r7, pc}

08000c46 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f860 	bl	8000d1a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f867 	bl	8000d42 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f85a 	bl	8000d5c <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f861 	bl	8000d84 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6839      	ldr	r1, [r7, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f854 	bl	8000d9e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f85b 	bl	8000dc6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f85a 	bl	8000de0 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff99 	bl	8000c64 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f854 	bl	8000dfa <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f852 	bl	8000e12 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff9f 	bl	8000cb2 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8000d74:	4602      	mov	r2, r0
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f84c 	bl	8000e2c <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f84a 	bl	8000e44 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffa5 	bl	8000d00 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8000db6:	4602      	mov	r2, r0
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f844 	bl	8000e5e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f843 	bl	8000e76 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f847 	bl	8000e96 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f847 	bl	8000eb0 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f84b 	bl	8000ed0 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f84b 	bl	8000eea <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f84f 	bl	8000f0a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f850 	bl	8000f24 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f858 	bl	8000f3c <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f859 	bl	8000f58 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f858 	bl	8000f6e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f860 	bl	8000f86 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f861 	bl	8000fa2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f860 	bl	8000fb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f868 	bl	8000fd0 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f869 	bl	8000fec <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f868 	bl	8001002 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f84e 	bl	8001018 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f834 	bl	800102e <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_kill>:

int _kill(int pid, int sig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800105e:	f002 fd7b 	bl	8003b58 <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
	return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_exit>:

void _exit (int status)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe7 	bl	8001054 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001086:	e7fe      	b.n	8001086 <_exit+0x12>

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f002 fd4e 	bl	8003b58 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20030000 	.word	0x20030000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	2000009c 	.word	0x2000009c
 80010f0:	20000128 	.word	0x20000128

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f975 	bl	8001426 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f92f 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000110 	.word	0x20000110

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000110 	.word	0x20000110

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db12      	blt.n	8001290 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <__NVIC_DisableIRQ+0x44>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	3320      	adds	r3, #32
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001284:	f3bf 8f4f 	dsb	sy
}
 8001288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800128a:	f3bf 8f6f 	isb	sy
}
 800128e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff05 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff1a 	bl	8001200 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff0d 	bl	800121c <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff1d 	bl	8001258 <__NVIC_DisableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff94 	bl	800135c <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e177      	b.n	800174c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	f040 8166 	bne.w	8001746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	2b02      	cmp	r3, #2
 8001490:	d130      	bne.n	80014f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80c0 	beq.w	8001746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_GPIO_Init+0x324>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a61      	ldr	r2, [pc, #388]	; (8001768 <HAL_GPIO_Init+0x328>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d037      	beq.n	800167e <HAL_GPIO_Init+0x23e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a57      	ldr	r2, [pc, #348]	; (8001770 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d031      	beq.n	800167a <HAL_GPIO_Init+0x23a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x334>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_GPIO_Init+0x236>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x338>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x232>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_GPIO_Init+0x33c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x22e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x340>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x22a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x344>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x226>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a51      	ldr	r2, [pc, #324]	; (8001788 <HAL_GPIO_Init+0x348>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x222>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a50      	ldr	r2, [pc, #320]	; (800178c <HAL_GPIO_Init+0x34c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x21e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <HAL_GPIO_Init+0x350>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x21a>
 8001656:	2309      	movs	r3, #9
 8001658:	e012      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800165a:	230a      	movs	r3, #10
 800165c:	e010      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800165e:	2308      	movs	r3, #8
 8001660:	e00e      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001662:	2307      	movs	r3, #7
 8001664:	e00c      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001666:	2306      	movs	r3, #6
 8001668:	e00a      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800166a:	2305      	movs	r3, #5
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800166e:	2304      	movs	r3, #4
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x240>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x240>
 800167e:	2300      	movs	r3, #0
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <HAL_GPIO_Init+0x328>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c2:	4a34      	ldr	r2, [pc, #208]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_GPIO_Init+0x354>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_GPIO_Init+0x354>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_GPIO_Init+0x354>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <HAL_GPIO_Init+0x354>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	f67f ae84 	bls.w	800145c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40013800 	.word	0x40013800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40021400 	.word	0x40021400
 8001784:	40021800 	.word	0x40021800
 8001788:	40021c00 	.word	0x40021c00
 800178c:	40022000 	.word	0x40022000
 8001790:	40022400 	.word	0x40022400
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e0d9      	b.n	8001968 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	f040 80c9 	bne.w	8001962 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80017d0:	4a6b      	ldr	r2, [pc, #428]	; (8001980 <HAL_GPIO_DeInit+0x1e8>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4013      	ands	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a63      	ldr	r2, [pc, #396]	; (8001984 <HAL_GPIO_DeInit+0x1ec>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d037      	beq.n	800186a <HAL_GPIO_DeInit+0xd2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a62      	ldr	r2, [pc, #392]	; (8001988 <HAL_GPIO_DeInit+0x1f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_DeInit+0xce>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a61      	ldr	r2, [pc, #388]	; (800198c <HAL_GPIO_DeInit+0x1f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_DeInit+0xca>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a60      	ldr	r2, [pc, #384]	; (8001990 <HAL_GPIO_DeInit+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_DeInit+0xc6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a5f      	ldr	r2, [pc, #380]	; (8001994 <HAL_GPIO_DeInit+0x1fc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_DeInit+0xc2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a5e      	ldr	r2, [pc, #376]	; (8001998 <HAL_GPIO_DeInit+0x200>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_DeInit+0xbe>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a5d      	ldr	r2, [pc, #372]	; (800199c <HAL_GPIO_DeInit+0x204>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_DeInit+0xba>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <HAL_GPIO_DeInit+0x208>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_DeInit+0xb6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <HAL_GPIO_DeInit+0x20c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_DeInit+0xb2>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a5a      	ldr	r2, [pc, #360]	; (80019a8 <HAL_GPIO_DeInit+0x210>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_DeInit+0xae>
 8001842:	2309      	movs	r3, #9
 8001844:	e012      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 8001846:	230a      	movs	r3, #10
 8001848:	e010      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 800184a:	2308      	movs	r3, #8
 800184c:	e00e      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 800184e:	2307      	movs	r3, #7
 8001850:	e00c      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 8001852:	2306      	movs	r3, #6
 8001854:	e00a      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_DeInit+0xd4>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d132      	bne.n	80018e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	4949      	ldr	r1, [pc, #292]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 8001886:	4013      	ands	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	4946      	ldr	r1, [pc, #280]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 8001894:	4013      	ands	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001898:	4b44      	ldr	r3, [pc, #272]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4942      	ldr	r1, [pc, #264]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	493f      	ldr	r1, [pc, #252]	; (80019ac <HAL_GPIO_DeInit+0x214>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80018c4:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <HAL_GPIO_DeInit+0x1e8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	43da      	mvns	r2, r3
 80018d4:	482a      	ldr	r0, [pc, #168]	; (8001980 <HAL_GPIO_DeInit+0x1e8>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	400a      	ands	r2, r1
 80018dc:	3302      	adds	r3, #2
 80018de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2103      	movs	r1, #3
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	08d2      	lsrs	r2, r2, #3
 8001918:	4019      	ands	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2103      	movs	r1, #3
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2103      	movs	r1, #3
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f af22 	bls.w	80017b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400
 800198c:	40020800 	.word	0x40020800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	40021000 	.word	0x40021000
 8001998:	40021400 	.word	0x40021400
 800199c:	40021800 	.word	0x40021800
 80019a0:	40021c00 	.word	0x40021c00
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40022400 	.word	0x40022400
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e264      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d075      	beq.n	8001aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a02:	4ba3      	ldr	r3, [pc, #652]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d00c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d112      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b9d      	ldr	r3, [pc, #628]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a26:	d10b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	4b99      	ldr	r3, [pc, #612]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d05b      	beq.n	8001aec <HAL_RCC_OscConfig+0x108>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d157      	bne.n	8001aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e23f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_OscConfig+0x74>
 8001a4a:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a90      	ldr	r2, [pc, #576]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xb0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x98>
 8001a62:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a8a      	ldr	r2, [pc, #552]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a83      	ldr	r2, [pc, #524]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a80      	ldr	r2, [pc, #512]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fb80 	bl	80011a0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb7c 	bl	80011a0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e204      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xc0>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb6c 	bl	80011a0 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fb68 	bl	80011a0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1f0      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0xe8>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afa:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b06:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d11c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x152>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1c4      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4952      	ldr	r1, [pc, #328]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e03a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x2b0>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fb21 	bl	80011a0 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff fb1d 	bl	80011a0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1a5      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4940      	ldr	r1, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_OscConfig+0x2b0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fb00 	bl	80011a0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fafc 	bl	80011a0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e184      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d030      	beq.n	8001c30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d016      	beq.n	8001c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCC_OscConfig+0x2b4>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fae0 	bl	80011a0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fadc 	bl	80011a0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e164      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x200>
 8001c02:	e015      	b.n	8001c30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x2b4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fac9 	bl	80011a0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff fac5 	bl	80011a0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e14d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a0 	beq.w	8001d7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x2b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d121      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_OscConfig+0x2b8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_RCC_OscConfig+0x2b8>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fa8b 	bl	80011a0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e011      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2ce>
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	42470000 	.word	0x42470000
 8001c98:	42470e80 	.word	0x42470e80
 8001c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff fa7e 	bl	80011a0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e106      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <HAL_RCC_OscConfig+0x4e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2f0>
 8001cc6:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x32a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x312>
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a7a      	ldr	r2, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x32a>
 8001cf6:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a74      	ldr	r2, [pc, #464]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a71      	ldr	r2, [pc, #452]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fa43 	bl	80011a0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fa3f 	bl	80011a0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0c5      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x33a>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fa2d 	bl	80011a0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fa29 	bl	80011a0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0af      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a55      	ldr	r2, [pc, #340]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 809b 	beq.w	8001ebe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d05c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d141      	bne.n	8001e20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_RCC_OscConfig+0x4ec>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f9fd 	bl	80011a0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f9f9 	bl	80011a0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e081      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	019b      	lsls	r3, r3, #6
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	3b01      	subs	r3, #1
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	061b      	lsls	r3, r3, #24
 8001dec:	4937      	ldr	r1, [pc, #220]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_OscConfig+0x4ec>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff f9d2 	bl	80011a0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff f9ce 	bl	80011a0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e056      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x41c>
 8001e1e:	e04e      	b.n	8001ebe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x4ec>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f9bb 	bl	80011a0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f9b7 	bl	80011a0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e03f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x44a>
 8001e4c:	e037      	b.n	8001ebe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e032      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d028      	beq.n	8001eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d11a      	bne.n	8001eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d111      	bne.n	8001eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	42470060 	.word	0x42470060

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cc      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d90c      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d044      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e067      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f8ec 	bl	80011a0 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f8e8 	bl	80011a0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20c      	bcs.n	800201c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f84c 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08003dbc 	.word	0x08003dbc
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b8:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x40>
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	f200 80bd 	bhi.w	8002244 <HAL_RCC_GetSysClockFreq+0x1a4>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d003      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x3a>
 80020d2:	e0b7      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b61      	ldr	r3, [pc, #388]	; (800225c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020d6:	60bb      	str	r3, [r7, #8]
       break;
 80020d8:	e0b7      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020da:	4b61      	ldr	r3, [pc, #388]	; (8002260 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80020dc:	60bb      	str	r3, [r7, #8]
      break;
 80020de:	e0b4      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04d      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	461a      	mov	r2, r3
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	ea02 0800 	and.w	r8, r2, r0
 800210e:	ea03 0901 	and.w	r9, r3, r1
 8002112:	4640      	mov	r0, r8
 8002114:	4649      	mov	r1, r9
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	014b      	lsls	r3, r1, #5
 8002120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002124:	0142      	lsls	r2, r0, #5
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	ebb0 0008 	subs.w	r0, r0, r8
 800212e:	eb61 0109 	sbc.w	r1, r1, r9
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	018b      	lsls	r3, r1, #6
 800213c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002140:	0182      	lsls	r2, r0, #6
 8002142:	1a12      	subs	r2, r2, r0
 8002144:	eb63 0301 	sbc.w	r3, r3, r1
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	00d9      	lsls	r1, r3, #3
 8002152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002156:	00d0      	lsls	r0, r2, #3
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	eb12 0208 	adds.w	r2, r2, r8
 8002160:	eb43 0309 	adc.w	r3, r3, r9
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	0259      	lsls	r1, r3, #9
 800216e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002172:	0250      	lsls	r0, r2, #9
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f7fe f83a 	bl	80001fc <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e04a      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	461a      	mov	r2, r3
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	ea02 0400 	and.w	r4, r2, r0
 80021aa:	ea03 0501 	and.w	r5, r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	014b      	lsls	r3, r1, #5
 80021bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c0:	0142      	lsls	r2, r0, #5
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	1b00      	subs	r0, r0, r4
 80021c8:	eb61 0105 	sbc.w	r1, r1, r5
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	018b      	lsls	r3, r1, #6
 80021d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021da:	0182      	lsls	r2, r0, #6
 80021dc:	1a12      	subs	r2, r2, r0
 80021de:	eb63 0301 	sbc.w	r3, r3, r1
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	00d9      	lsls	r1, r3, #3
 80021ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f0:	00d0      	lsls	r0, r2, #3
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	1912      	adds	r2, r2, r4
 80021f8:	eb45 0303 	adc.w	r3, r5, r3
 80021fc:	f04f 0000 	mov.w	r0, #0
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	0299      	lsls	r1, r3, #10
 8002206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800220a:	0290      	lsls	r0, r2, #10
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f7fd ffee 	bl	80001fc <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002246:	60bb      	str	r3, [r7, #8]
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	68bb      	ldr	r3, [r7, #8]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCC_GetHCLKFreq+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff0 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	08003dcc 	.word	0x08003dcc

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a8:	f7ff ffdc 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0b5b      	lsrs	r3, r3, #13
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08003dcc 	.word	0x08003dcc

080022cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d075      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002300:	4bad      	ldr	r3, [pc, #692]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002306:	f7fe ff4b 	bl	80011a0 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800230e:	f7fe ff47 	bl	80011a0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e18b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002320:	4ba6      	ldr	r3, [pc, #664]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	019a      	lsls	r2, r3, #6
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	071b      	lsls	r3, r3, #28
 8002344:	499d      	ldr	r1, [pc, #628]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002358:	4b98      	ldr	r3, [pc, #608]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235e:	0f1b      	lsrs	r3, r3, #28
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	019a      	lsls	r2, r3, #6
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	431a      	orrs	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	071b      	lsls	r3, r3, #28
 8002378:	4990      	ldr	r1, [pc, #576]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002386:	f023 021f 	bic.w	r2, r3, #31
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	3b01      	subs	r3, #1
 8002390:	498a      	ldr	r1, [pc, #552]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	019a      	lsls	r2, r3, #6
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	061b      	lsls	r3, r3, #24
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	071b      	lsls	r3, r3, #28
 80023b8:	4980      	ldr	r1, [pc, #512]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023c0:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023c6:	f7fe feeb 	bl	80011a0 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023ce:	f7fe fee7 	bl	80011a0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e12b      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023e0:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002400:	2b00      	cmp	r3, #0
 8002402:	d079      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002404:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800240a:	f7fe fec9 	bl	80011a0 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002412:	f7fe fec5 	bl	80011a0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e109      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002424:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d020      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	0f1b      	lsrs	r3, r3, #28
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	019a      	lsls	r2, r3, #6
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	431a      	orrs	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	4957      	ldr	r1, [pc, #348]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	3b01      	subs	r3, #1
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	4950      	ldr	r1, [pc, #320]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01e      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	0e1b      	lsrs	r3, r3, #24
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	019a      	lsls	r2, r3, #6
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	071b      	lsls	r3, r3, #28
 80024ac:	4943      	ldr	r1, [pc, #268]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	493e      	ldr	r1, [pc, #248]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fe66 	bl	80011a0 <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024d8:	f7fe fe62 	bl	80011a0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0a6      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ea:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f6:	d1ef      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 808d 	beq.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800252e:	f7fe fe37 	bl	80011a0 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe fe33 	bl	80011a0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e077      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d039      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	429a      	cmp	r2, r3
 8002570:	d032      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d11e      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fe01 	bl	80011a0 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e014      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fdfd 	bl	80011a0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d90b      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e03f      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80025b8:	42470068 	.word	0x42470068
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470070 	.word	0x42470070
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0e4      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e4:	d10d      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fa:	4911      	ldr	r1, [pc, #68]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]
 8002600:	e005      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002608:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800260c:	6093      	str	r3, [r2, #8]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800261c:	4313      	orrs	r3, r2
 800261e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002634:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	424711e0 	.word	0x424711e0

08002648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e03f      	b.n	80026da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f866 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f86b 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e021      	b.n	8002738 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f821 	bl	8002754 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	b09f      	sub	sp, #124	; 0x7c
 800276e:	af00      	add	r7, sp, #0
 8002770:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	68d9      	ldr	r1, [r3, #12]
 8002780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	ea40 0301 	orr.w	r3, r0, r1
 8002788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	431a      	orrs	r2, r3
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4313      	orrs	r3, r2
 80027a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027ac:	f021 010c 	bic.w	r1, r1, #12
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b6:	430b      	orrs	r3, r1
 80027b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	6999      	ldr	r1, [r3, #24]
 80027c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	ea40 0301 	orr.w	r3, r0, r1
 80027d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4bc5      	ldr	r3, [pc, #788]	; (8002aec <UART_SetConfig+0x384>)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d004      	beq.n	80027e6 <UART_SetConfig+0x7e>
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4bc3      	ldr	r3, [pc, #780]	; (8002af0 <UART_SetConfig+0x388>)
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d103      	bne.n	80027ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e6:	f7ff fd5d 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 80027ea:	6778      	str	r0, [r7, #116]	; 0x74
 80027ec:	e002      	b.n	80027f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ee:	f7ff fd45 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 80027f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fc:	f040 80b6 	bne.w	800296c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002802:	461c      	mov	r4, r3
 8002804:	f04f 0500 	mov.w	r5, #0
 8002808:	4622      	mov	r2, r4
 800280a:	462b      	mov	r3, r5
 800280c:	1891      	adds	r1, r2, r2
 800280e:	6439      	str	r1, [r7, #64]	; 0x40
 8002810:	415b      	adcs	r3, r3
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
 8002814:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002818:	1912      	adds	r2, r2, r4
 800281a:	eb45 0303 	adc.w	r3, r5, r3
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	00d9      	lsls	r1, r3, #3
 8002828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800282c:	00d0      	lsls	r0, r2, #3
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	1911      	adds	r1, r2, r4
 8002834:	6639      	str	r1, [r7, #96]	; 0x60
 8002836:	416b      	adcs	r3, r5
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	461a      	mov	r2, r3
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	1891      	adds	r1, r2, r2
 8002846:	63b9      	str	r1, [r7, #56]	; 0x38
 8002848:	415b      	adcs	r3, r3
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002850:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002854:	f7fd fcd2 	bl	80001fc <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <UART_SetConfig+0x38c>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	011e      	lsls	r6, r3, #4
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	461c      	mov	r4, r3
 800286a:	f04f 0500 	mov.w	r5, #0
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	1891      	adds	r1, r2, r2
 8002874:	6339      	str	r1, [r7, #48]	; 0x30
 8002876:	415b      	adcs	r3, r3
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
 800287a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800287e:	1912      	adds	r2, r2, r4
 8002880:	eb45 0303 	adc.w	r3, r5, r3
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	00d9      	lsls	r1, r3, #3
 800288e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002892:	00d0      	lsls	r0, r2, #3
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	1911      	adds	r1, r2, r4
 800289a:	65b9      	str	r1, [r7, #88]	; 0x58
 800289c:	416b      	adcs	r3, r5
 800289e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	1891      	adds	r1, r2, r2
 80028ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80028ae:	415b      	adcs	r3, r3
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028ba:	f7fd fc9f 	bl	80001fc <__aeabi_uldivmod>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <UART_SetConfig+0x38c>)
 80028c4:	fba3 1302 	umull	r1, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	2164      	movs	r1, #100	; 0x64
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	3332      	adds	r3, #50	; 0x32
 80028d6:	4a87      	ldr	r2, [pc, #540]	; (8002af4 <UART_SetConfig+0x38c>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028e4:	441e      	add	r6, r3
 80028e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e8:	4618      	mov	r0, r3
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	1894      	adds	r4, r2, r2
 80028f4:	623c      	str	r4, [r7, #32]
 80028f6:	415b      	adcs	r3, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028fe:	1812      	adds	r2, r2, r0
 8002900:	eb41 0303 	adc.w	r3, r1, r3
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	f04f 0500 	mov.w	r5, #0
 800290c:	00dd      	lsls	r5, r3, #3
 800290e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002912:	00d4      	lsls	r4, r2, #3
 8002914:	4622      	mov	r2, r4
 8002916:	462b      	mov	r3, r5
 8002918:	1814      	adds	r4, r2, r0
 800291a:	653c      	str	r4, [r7, #80]	; 0x50
 800291c:	414b      	adcs	r3, r1
 800291e:	657b      	str	r3, [r7, #84]	; 0x54
 8002920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	461a      	mov	r2, r3
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	1891      	adds	r1, r2, r2
 800292c:	61b9      	str	r1, [r7, #24]
 800292e:	415b      	adcs	r3, r3
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002936:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800293a:	f7fd fc5f 	bl	80001fc <__aeabi_uldivmod>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <UART_SetConfig+0x38c>)
 8002944:	fba3 1302 	umull	r1, r3, r3, r2
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	2164      	movs	r1, #100	; 0x64
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3332      	adds	r3, #50	; 0x32
 8002956:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <UART_SetConfig+0x38c>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	f003 0207 	and.w	r2, r3, #7
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4432      	add	r2, r6
 8002968:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800296a:	e0b9      	b.n	8002ae0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	461c      	mov	r4, r3
 8002970:	f04f 0500 	mov.w	r5, #0
 8002974:	4622      	mov	r2, r4
 8002976:	462b      	mov	r3, r5
 8002978:	1891      	adds	r1, r2, r2
 800297a:	6139      	str	r1, [r7, #16]
 800297c:	415b      	adcs	r3, r3
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002984:	1912      	adds	r2, r2, r4
 8002986:	eb45 0303 	adc.w	r3, r5, r3
 800298a:	f04f 0000 	mov.w	r0, #0
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	00d9      	lsls	r1, r3, #3
 8002994:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002998:	00d0      	lsls	r0, r2, #3
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	eb12 0804 	adds.w	r8, r2, r4
 80029a2:	eb43 0905 	adc.w	r9, r3, r5
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	008b      	lsls	r3, r1, #2
 80029ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029be:	0082      	lsls	r2, r0, #2
 80029c0:	4640      	mov	r0, r8
 80029c2:	4649      	mov	r1, r9
 80029c4:	f7fd fc1a 	bl	80001fc <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <UART_SetConfig+0x38c>)
 80029ce:	fba3 2302 	umull	r2, r3, r3, r2
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	011e      	lsls	r6, r3, #4
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	4618      	mov	r0, r3
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	1894      	adds	r4, r2, r2
 80029e4:	60bc      	str	r4, [r7, #8]
 80029e6:	415b      	adcs	r3, r3
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ee:	1812      	adds	r2, r2, r0
 80029f0:	eb41 0303 	adc.w	r3, r1, r3
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	f04f 0500 	mov.w	r5, #0
 80029fc:	00dd      	lsls	r5, r3, #3
 80029fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a02:	00d4      	lsls	r4, r2, #3
 8002a04:	4622      	mov	r2, r4
 8002a06:	462b      	mov	r3, r5
 8002a08:	1814      	adds	r4, r2, r0
 8002a0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a0c:	414b      	adcs	r3, r1
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	008b      	lsls	r3, r1, #2
 8002a24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a28:	0082      	lsls	r2, r0, #2
 8002a2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a2e:	f7fd fbe5 	bl	80001fc <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <UART_SetConfig+0x38c>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	2164      	movs	r1, #100	; 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	3332      	adds	r3, #50	; 0x32
 8002a4a:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <UART_SetConfig+0x38c>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a56:	441e      	add	r6, r3
 8002a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	1894      	adds	r4, r2, r2
 8002a66:	603c      	str	r4, [r7, #0]
 8002a68:	415b      	adcs	r3, r3
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a70:	1812      	adds	r2, r2, r0
 8002a72:	eb41 0303 	adc.w	r3, r1, r3
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	f04f 0500 	mov.w	r5, #0
 8002a7e:	00dd      	lsls	r5, r3, #3
 8002a80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a84:	00d4      	lsls	r4, r2, #3
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	eb12 0a00 	adds.w	sl, r2, r0
 8002a8e:	eb43 0b01 	adc.w	fp, r3, r1
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	008b      	lsls	r3, r1, #2
 8002aa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aaa:	0082      	lsls	r2, r0, #2
 8002aac:	4650      	mov	r0, sl
 8002aae:	4659      	mov	r1, fp
 8002ab0:	f7fd fba4 	bl	80001fc <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <UART_SetConfig+0x38c>)
 8002aba:	fba3 1302 	umull	r1, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2164      	movs	r1, #100	; 0x64
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	; 0x32
 8002acc:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <UART_SetConfig+0x38c>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4432      	add	r2, r6
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	377c      	adds	r7, #124	; 0x7c
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aea:	bf00      	nop
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40011400 	.word	0x40011400
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f407xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	809a      	strh	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	719a      	strb	r2, [r3, #6]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f841 	bl	8002bb2 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	889b      	ldrh	r3, [r3, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fe ff2f 	bl	80019b0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	741a      	strb	r2, [r3, #16]
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	889b      	ldrh	r3, [r3, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fe ff1c 	bl	80019b0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	741a      	strb	r2, [r3, #16]
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7c1b      	ldrb	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffe0 	bl	8002b60 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8002ba0:	e003      	b.n	8002baa <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ffc9 	bl	8002b3a <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8002ba8:	bf00      	nop
	}
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b088      	sub	sp, #32
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8002bd8:	2311      	movs	r3, #17
 8002bda:	e000      	b.n	8002bde <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f107 020c 	add.w	r2, r7, #12
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc22 	bl	8001440 <HAL_GPIO_Init>
}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_ZN11QAD_UARTMgr3getEv+0x48>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f3bf 8f5b 	dmb	ish
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <_ZN11QAD_UARTMgr3getEv+0x42>
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <_ZN11QAD_UARTMgr3getEv+0x48>)
 8002c26:	f000 ff4f 	bl	8003ac8 <__cxa_guard_acquire>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <_ZN11QAD_UARTMgr3getEv+0x42>
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8002c3c:	f000 fa40 	bl	80030c0 <_ZN11QAD_UARTMgrC1Ev>
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <_ZN11QAD_UARTMgr3getEv+0x48>)
 8002c42:	f000 ff4d 	bl	8003ae0 <__cxa_guard_release>
		return instance;
 8002c46:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000100 	.word	0x20000100
 8002c50:	200000a0 	.word	0x200000a0

08002c54 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b07      	cmp	r3, #7
 8002c62:	d901      	bls.n	8002c68 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8002c64:	2302      	movs	r3, #2
 8002c66:	e00a      	b.n	8002c7e <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8002c68:	f7ff ffcc 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	79fa      	ldrb	r2, [r7, #7]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	781b      	ldrb	r3, [r3, #0]
	}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f429xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	d901      	bls.n	8002c9a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e00a      	b.n	8002cb0 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8002c9a:	f7ff ffb3 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3304      	adds	r3, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
	}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f429xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d902      	bls.n	8002cce <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8002cc8:	f06f 0309 	mvn.w	r3, #9
 8002ccc:	e00b      	b.n	8002ce6 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8002cce:	f7ff ff99 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8002cf8:	f7ff ff84 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f000 fa5e 	bl	80031c4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8002d08:	4603      	mov	r3, r0
	}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8002d1c:	f7ff ff72 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002d20:	4602      	mov	r2, r0
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 fa75 	bl	8003216 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8002d3e:	f7ff ff61 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002d42:	4602      	mov	r2, r0
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f000 fa7f 	bl	800324c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8002d60:	f7ff ff50 	bl	8002c04 <_ZN11QAD_UARTMgr3getEv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fb70 	bl	8003450 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff65 	bl	8002c54 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e012      	b.n	8002dc4 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffa3 	bl	8002cee <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f8a7 	bl	8002efc <_ZN8QAD_UART10periphInitEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	785b      	ldrb	r3, [r3, #1]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ffa8 	bl	8002d12 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 8002ddc:	2101      	movs	r1, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f924 	bl	800302c <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff92 	bl	8002d12 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8002dee:	e000      	b.n	8002df2 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8002df0:	bf00      	nop
}
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	331c      	adds	r3, #28
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e26:	60da      	str	r2, [r3, #12]
  m_eTXState = QA_Active;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e52:	60da      	str	r2, [r3, #12]
  m_eTXState = QA_Inactive;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]
  m_eRXState = QA_Active;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f022 0220 	bic.w	r2, r2, #32
 8002eaa:	60da      	str	r2, [r3, #12]
  m_eRXState = QA_Inactive;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->DR = uData;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	605a      	str	r2, [r3, #4]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->DR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	b2db      	uxtb	r3, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8a1b      	ldrh	r3, [r3, #16]
 8002f18:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8002f22:	2303      	movs	r3, #3
 8002f24:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7c9b      	ldrb	r3, [r3, #18]
 8002f2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f107 020c 	add.w	r2, r7, #12
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fa82 	bl	8001440 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8b1b      	ldrh	r3, [r3, #24]
 8002f40:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8002f42:	2302      	movs	r3, #2
 8002f44:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e9b      	ldrb	r3, [r3, #26]
 8002f52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f107 020c 	add.w	r2, r7, #12
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fa6e 	bl	8001440 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fee3 	bl	8002d34 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fe87 	bl	8002c86 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	331c      	adds	r3, #28
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fb4a 	bl	8002648 <HAL_UART_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f830 	bl	800302c <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e029      	b.n	8003024 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe67 	bl	8002cb8 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7a1b      	ldrb	r3, [r3, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fe f9de 	bl	80013b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe5a 	bl	8002cb8 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003004:	4603      	mov	r3, r0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe f9f1 	bl	80013ee <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01b      	beq.n	8003076 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fefc 	bl	8002e3c <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff25 	bl	8002e94 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe32 	bl	8002cb8 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003054:	4603      	mov	r3, r0
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f9d7 	bl	800140a <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800306a:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	331c      	adds	r3, #28
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fb36 	bl	80026e2 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fe6b 	bl	8002d56 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8b1b      	ldrh	r3, [r3, #24]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fe fb84 	bl	8001798 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8a1b      	ldrh	r3, [r3, #16]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fe fb7c 	bl	8001798 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b07      	cmp	r3, #7
 80030d0:	d80d      	bhi.n	80030ee <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3301      	adds	r3, #1
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e7ee      	b.n	80030cc <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2205      	movs	r2, #5
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2206      	movs	r2, #6
 800311c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2207      	movs	r2, #7
 8003124:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 800312c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8003132:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8003138:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8003144:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8003156:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2225      	movs	r2, #37	; 0x25
 800315c:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2226      	movs	r2, #38	; 0x26
 8003162:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2227      	movs	r2, #39	; 0x27
 8003168:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2234      	movs	r2, #52	; 0x34
 8003170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2235      	movs	r2, #53	; 0x35
 8003178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2247      	movs	r2, #71	; 0x47
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2252      	movs	r2, #82	; 0x52
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2253      	movs	r2, #83	; 0x53
 8003190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40011000 	.word	0x40011000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40007800 	.word	0x40007800
 80031c0:	40007c00 	.word	0x40007c00

080031c4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d901      	bls.n	80031da <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e017      	b.n	800320a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3301      	adds	r3, #1
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 80031f0:	2302      	movs	r3, #2
 80031f2:	e00a      	b.n	800320a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3301      	adds	r3, #1
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	2b07      	cmp	r3, #7
 8003226:	d80a      	bhi.n	800323e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3301      	adds	r3, #1
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e000      	b.n	8003240 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800323e:	bf00      	nop
}
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 800324c:	b480      	push	{r7}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	2b08      	cmp	r3, #8
 800325c:	f200 80ef 	bhi.w	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	0800328d 	.word	0x0800328d
 800326c:	080032c3 	.word	0x080032c3
 8003270:	080032f9 	.word	0x080032f9
 8003274:	0800332f 	.word	0x0800332f
 8003278:	08003365 	.word	0x08003365
 800327c:	0800339b 	.word	0x0800339b
 8003280:	080033d1 	.word	0x080033d1
 8003284:	08003407 	.word	0x08003407
 8003288:	0800343d 	.word	0x0800343d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	4b6e      	ldr	r3, [pc, #440]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	4a6d      	ldr	r2, [pc, #436]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	4b6b      	ldr	r3, [pc, #428]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 80032a8:	4b68      	ldr	r3, [pc, #416]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	4a67      	ldr	r2, [pc, #412]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 80032b4:	4b65      	ldr	r3, [pc, #404]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	4a64      	ldr	r2, [pc, #400]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032ba:	f023 0310 	bic.w	r3, r3, #16
 80032be:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80032c0:	e0bd      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a60      	ldr	r2, [pc, #384]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b5e      	ldr	r3, [pc, #376]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	623b      	str	r3, [r7, #32]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a5a      	ldr	r2, [pc, #360]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80032ea:	4b58      	ldr	r3, [pc, #352]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a57      	ldr	r2, [pc, #348]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032f4:	6213      	str	r3, [r2, #32]
      break;
 80032f6:	e0a2      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a4c      	ldr	r2, [pc, #304]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800331a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331e:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8003320:	4b4a      	ldr	r3, [pc, #296]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4a49      	ldr	r2, [pc, #292]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332a:	6213      	str	r3, [r2, #32]
      break;
 800332c:	e087      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	4b46      	ldr	r3, [pc, #280]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a45      	ldr	r2, [pc, #276]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 800334a:	4b40      	ldr	r3, [pc, #256]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a3f      	ldr	r2, [pc, #252]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003354:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a3c      	ldr	r2, [pc, #240]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800335c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003360:	6213      	str	r3, [r2, #32]
      break;
 8003362:	e06c      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	4a37      	ldr	r2, [pc, #220]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800336e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003372:	6413      	str	r3, [r2, #64]	; 0x40
 8003374:	4b35      	ldr	r3, [pc, #212]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8003380:	4b32      	ldr	r3, [pc, #200]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a31      	ldr	r2, [pc, #196]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a2e      	ldr	r2, [pc, #184]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003396:	6213      	str	r3, [r2, #32]
      break;
 8003398:	e051      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	4a2a      	ldr	r2, [pc, #168]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033a4:	f043 0320 	orr.w	r3, r3, #32
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	4a24      	ldr	r2, [pc, #144]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033bc:	f043 0320 	orr.w	r3, r3, #32
 80033c0:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033c8:	f023 0320 	bic.w	r3, r3, #32
 80033cc:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80033ce:	e036      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a1c      	ldr	r2, [pc, #112]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033de:	6413      	str	r3, [r2, #64]	; 0x40
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4a16      	ldr	r2, [pc, #88]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033f6:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003402:	6213      	str	r3, [r2, #32]
      break;
 8003404:	e01b      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800342c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x200>)
 8003434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003438:	6213      	str	r3, [r2, #32]
      break;
 800343a:	e000      	b.n	800343e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1f2>
    case (QAD_UARTNone):
    	break;
 800343c:	bf00      	nop
  }
}
 800343e:	bf00      	nop
 8003440:	372c      	adds	r7, #44	; 0x2c
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b08      	cmp	r3, #8
 8003460:	d84d      	bhi.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	0800348d 	.word	0x0800348d
 800346c:	0800349b 	.word	0x0800349b
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034b7 	.word	0x080034b7
 8003478:	080034c5 	.word	0x080034c5
 800347c:	080034d3 	.word	0x080034d3
 8003480:	080034e1 	.word	0x080034e1
 8003484:	080034ef 	.word	0x080034ef
 8003488:	080034fd 	.word	0x080034fd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8003498:	e031      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a1b      	ldr	r2, [pc, #108]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034a6:	e02a      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034b4:	e023      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a14      	ldr	r2, [pc, #80]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034bc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034c2:	e01c      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	4a10      	ldr	r2, [pc, #64]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034ce:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034d0:	e015      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034d8:	f023 0320 	bic.w	r3, r3, #32
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80034de:	e00e      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034ec:	e007      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a06      	ldr	r2, [pc, #24]	; (800350c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80034f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80034fa:	e000      	b.n	80034fe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 80034fc:	bf00      	nop
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7b1b      	ldrb	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e010      	b.n	8003548 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	e003      	b.n	8003548 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	f7fc fe36 	bl	80001ec <strlen>
 8003580:	4603      	mov	r3, r0
 8003582:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8003584:	2300      	movs	r3, #0
 8003586:	81fb      	strh	r3, [r7, #14]
 8003588:	89fa      	ldrh	r2, [r7, #14]
 800358a:	89bb      	ldrh	r3, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d20f      	bcs.n	80035b0 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f837 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f000 f9e1 	bl	800396a <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	3301      	adds	r3, #1
 80035ac:	81fb      	strh	r3, [r7, #14]
 80035ae:	e7eb      	b.n	8003588 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f827 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	210d      	movs	r1, #13
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f9d3 	bl	800396a <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f80f 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	210d      	movs	r1, #13
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f9bb 	bl	800396a <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	return get();
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f805 	bl	8003620 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8003616:	4603      	mov	r3, r0
      }
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f805 	bl	800363a <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8003630:	4603      	mov	r3, r0
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f806 	bl	8003656 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800364a:	4603      	mov	r3, r0
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f805 	bl	8003670 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003666:	4603      	mov	r3, r0
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f805 	bl	8003688 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 800367e:	4603      	mov	r3, r0
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f805 	bl	80036a2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3314      	adds	r3, #20
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f8e4 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fb52 	bl	8002d78 <_ZN8QAD_UART4initEv>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3314      	adds	r3, #20
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f8d2 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fb6a 	bl	8002dcc <_ZN8QAD_UART6deinitEv>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b095      	sub	sp, #84	; 0x54
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3314      	adds	r3, #20
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8c0 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003714:	4603      	mov	r3, r0
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fb6e 	bl	8002df8 <_ZN8QAD_UART9getHandleEv>
 800371c:	4602      	mov	r2, r0
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	4611      	mov	r1, r2
 8003724:	2244      	movs	r2, #68	; 0x44
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fa48 	bl	8003bbc <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01f      	beq.n	8003782 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3314      	adds	r3, #20
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f8a4 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800374c:	4603      	mov	r3, r0
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fbc6 	bl	8002ee0 <_ZN8QAD_UART6dataRXEv>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7b9b      	ldrb	r3, [r3, #14]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3308      	adds	r3, #8
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff4e 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800376c:	4602      	mov	r2, r0
 800376e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 f8f8 	bl	800396a <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d035      	beq.n	8003804 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff33 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f8cd 	bl	8003944 <_ZN14QAT_FIFOBuffer5emptyEv>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3314      	adds	r3, #20
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f868 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80037c4:	4604      	mov	r4, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff1c 	bl	8003608 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f8ed 	bl	80039b2 <_ZN14QAT_FIFOBuffer3popEv>
 80037d8:	4603      	mov	r3, r0
 80037da:	4619      	mov	r1, r3
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff fb6f 	bl	8002ec0 <_ZN8QAD_UART6dataTXEh>
 80037e2:	e00b      	b.n	80037fc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3314      	adds	r3, #20
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f853 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fb23 	bl	8002e3c <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003802:	601a      	str	r2, [r3, #0]
  }
}
 8003804:	bf00      	nop
 8003806:	3754      	adds	r7, #84	; 0x54
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3314      	adds	r3, #20
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f83b 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800381e:	4603      	mov	r3, r0
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff faf5 	bl	8002e10 <_ZN8QAD_UART7startTXEv>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3314      	adds	r3, #20
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f82a 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003840:	4603      	mov	r3, r0
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fafa 	bl	8002e3c <_ZN8QAD_UART6stopTXEv>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3314      	adds	r3, #20
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f819 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff faff 	bl	8002e68 <_ZN8QAD_UART7startRXEv>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3314      	adds	r3, #20
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f808 	bl	8003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003884:	4603      	mov	r3, r0
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fb04 	bl	8002e94 <_ZN8QAD_UART6stopRXEv>
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	return get();
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f805 	bl	80038ac <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 80038a2:	4603      	mov	r3, r0
      }
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f805 	bl	80038c6 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80038bc:	4603      	mov	r3, r0
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f806 	bl	80038e2 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80038d6:	4603      	mov	r3, r0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f805 	bl	80038fc <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f805 	bl	8003914 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800390a:	4603      	mov	r3, r0
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f805 	bl	800392e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8003924:	4603      	mov	r3, r0
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	88da      	ldrh	r2, [r3, #6]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	891b      	ldrh	r3, [r3, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	d101      	bne.n	800395c <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	891b      	ldrh	r3, [r3, #8]
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 f847 	bl	8003a12 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8003984:	4602      	mov	r2, r0
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	889a      	ldrh	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	891b      	ldrh	r3, [r3, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d906      	bls.n	80039a4 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	891b      	ldrh	r3, [r3, #8]
 800399a:	3301      	adds	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 80039a2:	e002      	b.n	80039aa <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	811a      	strh	r2, [r3, #8]
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffc2 	bl	8003944 <_ZN14QAT_FIFOBuffer5emptyEv>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	88db      	ldrh	r3, [r3, #6]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 f81a 	bl	8003a12 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80039de:	4603      	mov	r3, r0
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	889a      	ldrh	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	88db      	ldrh	r3, [r3, #6]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d906      	bls.n	80039fe <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	88db      	ldrh	r3, [r3, #6]
 80039f4:	3301      	adds	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	80da      	strh	r2, [r3, #6]
 80039fc:	e002      	b.n	8003a04 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	80da      	strh	r2, [r3, #6]
		return uData;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	e000      	b.n	8003a0a <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f807 	bl	8003a30 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4413      	add	r3, r2
      }
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f805 	bl	8003a4a <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f806 	bl	8003a66 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f805 	bl	8003a80 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f805 	bl	8003a98 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f805 	bl	8003ab2 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <__cxa_guard_acquire>:
 8003ac8:	6803      	ldr	r3, [r0, #0]
 8003aca:	07db      	lsls	r3, r3, #31
 8003acc:	d406      	bmi.n	8003adc <__cxa_guard_acquire+0x14>
 8003ace:	7843      	ldrb	r3, [r0, #1]
 8003ad0:	b103      	cbz	r3, 8003ad4 <__cxa_guard_acquire+0xc>
 8003ad2:	deff      	udf	#255	; 0xff
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	7043      	strb	r3, [r0, #1]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	4770      	bx	lr
 8003adc:	2000      	movs	r0, #0
 8003ade:	4770      	bx	lr

08003ae0 <__cxa_guard_release>:
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	6003      	str	r3, [r0, #0]
 8003ae4:	4770      	bx	lr

08003ae6 <_Znwj>:
 8003ae6:	2801      	cmp	r0, #1
 8003ae8:	bf38      	it	cc
 8003aea:	2001      	movcc	r0, #1
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 f85b 	bl	8003bac <malloc>
 8003af6:	b930      	cbnz	r0, 8003b06 <_Znwj+0x20>
 8003af8:	f000 f81e 	bl	8003b38 <_ZSt15get_new_handlerv>
 8003afc:	b908      	cbnz	r0, 8003b02 <_Znwj+0x1c>
 8003afe:	f000 f823 	bl	8003b48 <abort>
 8003b02:	4780      	blx	r0
 8003b04:	e7f4      	b.n	8003af0 <_Znwj+0xa>
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <_Znaj>:
 8003b08:	f7ff bfed 	b.w	8003ae6 <_Znwj>

08003b0c <__cxa_pure_virtual>:
 8003b0c:	b508      	push	{r3, lr}
 8003b0e:	f000 f80d 	bl	8003b2c <_ZSt9terminatev>

08003b12 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003b12:	b508      	push	{r3, lr}
 8003b14:	4780      	blx	r0
 8003b16:	f000 f817 	bl	8003b48 <abort>
	...

08003b1c <_ZSt13get_terminatev>:
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <_ZSt13get_terminatev+0xc>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	f3bf 8f5b 	dmb	ish
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <_ZSt9terminatev>:
 8003b2c:	b508      	push	{r3, lr}
 8003b2e:	f7ff fff5 	bl	8003b1c <_ZSt13get_terminatev>
 8003b32:	f7ff ffee 	bl	8003b12 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08003b38 <_ZSt15get_new_handlerv>:
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <_ZSt15get_new_handlerv+0xc>)
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	f3bf 8f5b 	dmb	ish
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000104 	.word	0x20000104

08003b48 <abort>:
 8003b48:	b508      	push	{r3, lr}
 8003b4a:	2006      	movs	r0, #6
 8003b4c:	f000 f8de 	bl	8003d0c <raise>
 8003b50:	2001      	movs	r0, #1
 8003b52:	f7fd fa8f 	bl	8001074 <_exit>
	...

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000010 	.word	0x20000010

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4d0d      	ldr	r5, [pc, #52]	; (8003b9c <__libc_init_array+0x38>)
 8003b68:	4c0d      	ldr	r4, [pc, #52]	; (8003ba0 <__libc_init_array+0x3c>)
 8003b6a:	1b64      	subs	r4, r4, r5
 8003b6c:	10a4      	asrs	r4, r4, #2
 8003b6e:	2600      	movs	r6, #0
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	4d0b      	ldr	r5, [pc, #44]	; (8003ba4 <__libc_init_array+0x40>)
 8003b76:	4c0c      	ldr	r4, [pc, #48]	; (8003ba8 <__libc_init_array+0x44>)
 8003b78:	f000 f8f2 	bl	8003d60 <_init>
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	2600      	movs	r6, #0
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	08003e00 	.word	0x08003e00
 8003ba0:	08003e00 	.word	0x08003e00
 8003ba4:	08003e00 	.word	0x08003e00
 8003ba8:	08003e04 	.word	0x08003e04

08003bac <malloc>:
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <malloc+0xc>)
 8003bae:	4601      	mov	r1, r0
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f000 b819 	b.w	8003be8 <_malloc_r>
 8003bb6:	bf00      	nop
 8003bb8:	20000010 	.word	0x20000010

08003bbc <memcpy>:
 8003bbc:	440a      	add	r2, r1
 8003bbe:	4291      	cmp	r1, r2
 8003bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bc4:	d100      	bne.n	8003bc8 <memcpy+0xc>
 8003bc6:	4770      	bx	lr
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd2:	4291      	cmp	r1, r2
 8003bd4:	d1f9      	bne.n	8003bca <memcpy+0xe>
 8003bd6:	bd10      	pop	{r4, pc}

08003bd8 <memset>:
 8003bd8:	4402      	add	r2, r0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d100      	bne.n	8003be2 <memset+0xa>
 8003be0:	4770      	bx	lr
 8003be2:	f803 1b01 	strb.w	r1, [r3], #1
 8003be6:	e7f9      	b.n	8003bdc <memset+0x4>

08003be8 <_malloc_r>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	1ccd      	adds	r5, r1, #3
 8003bec:	f025 0503 	bic.w	r5, r5, #3
 8003bf0:	3508      	adds	r5, #8
 8003bf2:	2d0c      	cmp	r5, #12
 8003bf4:	bf38      	it	cc
 8003bf6:	250c      	movcc	r5, #12
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	db01      	blt.n	8003c02 <_malloc_r+0x1a>
 8003bfe:	42a9      	cmp	r1, r5
 8003c00:	d903      	bls.n	8003c0a <_malloc_r+0x22>
 8003c02:	230c      	movs	r3, #12
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	2000      	movs	r0, #0
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0a:	f000 f89b 	bl	8003d44 <__malloc_lock>
 8003c0e:	4921      	ldr	r1, [pc, #132]	; (8003c94 <_malloc_r+0xac>)
 8003c10:	680a      	ldr	r2, [r1, #0]
 8003c12:	4614      	mov	r4, r2
 8003c14:	b99c      	cbnz	r4, 8003c3e <_malloc_r+0x56>
 8003c16:	4f20      	ldr	r7, [pc, #128]	; (8003c98 <_malloc_r+0xb0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b923      	cbnz	r3, 8003c26 <_malloc_r+0x3e>
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f000 f83c 	bl	8003c9c <_sbrk_r>
 8003c24:	6038      	str	r0, [r7, #0]
 8003c26:	4629      	mov	r1, r5
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f000 f837 	bl	8003c9c <_sbrk_r>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	d123      	bne.n	8003c7a <_malloc_r+0x92>
 8003c32:	230c      	movs	r3, #12
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 f88a 	bl	8003d50 <__malloc_unlock>
 8003c3c:	e7e3      	b.n	8003c06 <_malloc_r+0x1e>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	1b5b      	subs	r3, r3, r5
 8003c42:	d417      	bmi.n	8003c74 <_malloc_r+0x8c>
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	d903      	bls.n	8003c50 <_malloc_r+0x68>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	441c      	add	r4, r3
 8003c4c:	6025      	str	r5, [r4, #0]
 8003c4e:	e004      	b.n	8003c5a <_malloc_r+0x72>
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	42a2      	cmp	r2, r4
 8003c54:	bf0c      	ite	eq
 8003c56:	600b      	streq	r3, [r1, #0]
 8003c58:	6053      	strne	r3, [r2, #4]
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f000 f878 	bl	8003d50 <__malloc_unlock>
 8003c60:	f104 000b 	add.w	r0, r4, #11
 8003c64:	1d23      	adds	r3, r4, #4
 8003c66:	f020 0007 	bic.w	r0, r0, #7
 8003c6a:	1ac2      	subs	r2, r0, r3
 8003c6c:	d0cc      	beq.n	8003c08 <_malloc_r+0x20>
 8003c6e:	1a1b      	subs	r3, r3, r0
 8003c70:	50a3      	str	r3, [r4, r2]
 8003c72:	e7c9      	b.n	8003c08 <_malloc_r+0x20>
 8003c74:	4622      	mov	r2, r4
 8003c76:	6864      	ldr	r4, [r4, #4]
 8003c78:	e7cc      	b.n	8003c14 <_malloc_r+0x2c>
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d0e3      	beq.n	8003c4c <_malloc_r+0x64>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4630      	mov	r0, r6
 8003c88:	f000 f808 	bl	8003c9c <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1dd      	bne.n	8003c4c <_malloc_r+0x64>
 8003c90:	e7cf      	b.n	8003c32 <_malloc_r+0x4a>
 8003c92:	bf00      	nop
 8003c94:	20000108 	.word	0x20000108
 8003c98:	2000010c 	.word	0x2000010c

08003c9c <_sbrk_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d06      	ldr	r5, [pc, #24]	; (8003cb8 <_sbrk_r+0x1c>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	f7fd f9ee 	bl	8001088 <_sbrk>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_sbrk_r+0x1a>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_sbrk_r+0x1a>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20000114 	.word	0x20000114

08003cbc <_raise_r>:
 8003cbc:	291f      	cmp	r1, #31
 8003cbe:	b538      	push	{r3, r4, r5, lr}
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	d904      	bls.n	8003cd0 <_raise_r+0x14>
 8003cc6:	2316      	movs	r3, #22
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cd2:	b112      	cbz	r2, 8003cda <_raise_r+0x1e>
 8003cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cd8:	b94b      	cbnz	r3, 8003cee <_raise_r+0x32>
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 f830 	bl	8003d40 <_getpid_r>
 8003ce0:	462a      	mov	r2, r5
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cea:	f000 b817 	b.w	8003d1c <_kill_r>
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d00a      	beq.n	8003d08 <_raise_r+0x4c>
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	d103      	bne.n	8003cfe <_raise_r+0x42>
 8003cf6:	2316      	movs	r3, #22
 8003cf8:	6003      	str	r3, [r0, #0]
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	e7e7      	b.n	8003cce <_raise_r+0x12>
 8003cfe:	2400      	movs	r4, #0
 8003d00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d04:	4628      	mov	r0, r5
 8003d06:	4798      	blx	r3
 8003d08:	2000      	movs	r0, #0
 8003d0a:	e7e0      	b.n	8003cce <_raise_r+0x12>

08003d0c <raise>:
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <raise+0xc>)
 8003d0e:	4601      	mov	r1, r0
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f7ff bfd3 	b.w	8003cbc <_raise_r>
 8003d16:	bf00      	nop
 8003d18:	20000010 	.word	0x20000010

08003d1c <_kill_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d07      	ldr	r5, [pc, #28]	; (8003d3c <_kill_r+0x20>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	f7fd f993 	bl	8001054 <_kill>
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	d102      	bne.n	8003d38 <_kill_r+0x1c>
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	b103      	cbz	r3, 8003d38 <_kill_r+0x1c>
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000114 	.word	0x20000114

08003d40 <_getpid_r>:
 8003d40:	f7fd b980 	b.w	8001044 <_getpid>

08003d44 <__malloc_lock>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__malloc_lock+0x8>)
 8003d46:	f000 b809 	b.w	8003d5c <__retarget_lock_acquire_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	2000011c 	.word	0x2000011c

08003d50 <__malloc_unlock>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__malloc_unlock+0x8>)
 8003d52:	f000 b804 	b.w	8003d5e <__retarget_lock_release_recursive>
 8003d56:	bf00      	nop
 8003d58:	2000011c 	.word	0x2000011c

08003d5c <__retarget_lock_acquire_recursive>:
 8003d5c:	4770      	bx	lr

08003d5e <__retarget_lock_release_recursive>:
 8003d5e:	4770      	bx	lr

08003d60 <_init>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr

08003d6c <_fini>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr
